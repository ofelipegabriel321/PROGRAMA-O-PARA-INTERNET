PASSO 01:
    Instale o Djando pelo terminal com o comando "pip install django==2.0".
PASSO 02:
    Começe o projeto pelo terminal com o comando "django-admin startproject
    connectedin".
PASSO 03:
    Crie o banco de dados do projeto pelo terminal com o comando "python
    manage.py migrate". Isso irá criar o arquivo db.sqlite3.
PASSO 04:
    Você vai precisar subir o servidor em certas etapas do projeto, isso se faz
    pelo terminal (e dentro da pasta do projeto) com o comando "python manage.py
    runserver" e abrindo o site "http://localhost:8000/" ou "http://127.0.0.1:8000/"
    no navegador (Ctrl + C para parar o servidor).
PASSO 05:
    Crie e registre uma aplicação "perfis":
    PASSO 04.1:
        Crie uma aplicação pelo terminal com o comando "python manage.py
        startapp perfis". Isso irá criar a pasta "perfis" e seus arquivos.

    PASSO 04.2:
        Registre a aplicação no "connectedin\settings.py".

-PARA OS PRÓXIMOS PASSOS:
    Dentro das aplicações existem três elementos que interagem entre si:
        - Views (perfis\views.py): uma View é uma função que é a lógica
          responsável por receber uma solicitação da Web (Web request)
          e retornar uma resposta da Web (Web response).
        - Urls (connectedin\urls.py): uma Url indica qual endereço na Web
          irá transmitir qual View. É recomendável que se crie um arquivo
          de Urls em cada aplicação (perfis\urls.py, nesse caso) e que
          cada arquivo de cada aplicação seja importado no arquivo de Urls
          do projeto (connectedin\urls.py, nesse caso).
        - Templates (perfis/templates (OBS: você deve criar essa pasta)):
          armazena cada página utilizada na exibição feita por uma View.
    Ou seja, um Templates contém páginas, que são referenciadas na View, a
    responsável por receber uma request e entregar uma response, que é
    referenciada na Url, a responsável por dizer em que caminho url a View
    será acessada.

PASSO 06:
    Crie a View "index" e a URL "", que a referencia:
    PASSO 06.1:
        Crie em perfis uma View "index" que retorne uma response "Bem-vindo ao
        Connectedin"(por conta dessa response que será feita a partir do método
        HttpResponse(), que precisa ser importado de django.http, não precisamos
        do Templates, para retornar uma página, por enquento).

    PASSO 06.2:
        Crie em "connectedin\urls.py" a Url "" que referencia a View "index"
        (isso significa que no servidor, a Url "http://localhost:8000/" ou
        "http://127.0.0.1:8000/" irá ativar a view "index").

    Suba o servidor para ver o estado da página.
PASSO 07:
    Nesse passo faremos uma página html e uma View que a referencia.
    PASSO 07.1:
        Crie a pasta templates da aplicação (perfis\templates nesse caso).
        Em perfis\templates crie o arquivo "index.html" e ponha o código
        Html de acordo com o que desejar exibir. Pus uma página de nome
        ConnectedIn que exibe "Bem-vindo ao Connectedin!"
    PASSO 07.2:
        Em perfis\views.py faça o return da renderização da página index.html
        na view index por meio do método render(), que tem como argumentos a
        request (o parâmentro da view) e o nome do template ("index.html" no
        caso). Faça os comentários devidos no código de HttpResponse em
        perfis\views.py.

    Suba o servidor para ver o estado da página.

-PARA OS PRÓXIMOS PASSOS: Para produzir uma página dinâmica, que muda
entre requisições, faremos uma página de perfis e alguns exemplares de
perfis engessados. Isso será feito nos passos 08, 09 e 10.

PASSO 08:
    Vamos apenas criar a página, view e url de perfil nesse passo.
    PASSO 08.1:
        Vá em "perfis\templates" e crie a página "perfil.html".
    PASSO 08.2:
        Faça a view de perfil "perfis\views.py", de modo semelhante à
        view index.
    PASSO 08.3:
        Crie em "connectedin\urls.py" a url "perfil/".

    Suba o servidor para ver o estado da página.
PASSO 09:
    Agora faremos com que um perfil específico com id numérico específico,
    por meio da url, tenha suas informações acessadas.
    PASSO 09.1:
        Em "connectedin\urls.py" substitua a url "perfil/" por
        "perfil/<int:perfil_id>", o que indica que ela receberá um número
        inteiro após a "/", que será nomeado como "perfil_id". Além disso,
        substitua a view "views.perfil" pela que faremos a seguir, a view
        "views.exibir_perfil".
    PASSO 09.2:
        Em "perfis\views.py", remova a view perfil e faça a view exibir_perfil,
        que recebe a request, o perfil_id. Essa view vai fazer um print() do
        perfil_id e renderizar "perfil.html".

    Suba o servidor para ver o estado da página.
PASSO 10:
    Agora faremos uso do models.py, onde ficam as classes de modelo, e então
    criaremos 2 possibilidades de acesso a perfis.
    PASSO 10.1:
        Crie em "perfis\models.py" a classe Perfil, com os atributos
        nome, email, telefone, nome_empresa.
    PASSO 10.2:
        Em "perfis\views.py" faça o import do models e faça 2 possibilidades
        de acesso a perfis, onde cada uma cria um objeto Perfil chamado perfil,
        que será usado na renderização da página.
    PASSO 10.3:
        Em "perfis\templates\perfil.html" adicione as informações nome, email,
        telefone, nome_empresa do usuário que estiver acessando o seu perfil.

    Suba o servidor para ver o estado da página.
